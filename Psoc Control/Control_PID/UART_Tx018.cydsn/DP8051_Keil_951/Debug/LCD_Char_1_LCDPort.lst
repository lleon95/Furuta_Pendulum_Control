C51 COMPILER V9.51   LCD_CHAR_1_LCDPORT                                                    03/16/2018 17:06:27 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE LCD_CHAR_1_LCDPORT
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\LCD_Char_1_LCDPort.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\LCD_Char_1_LCDPort.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB 
                    -WL(2) PR(.\DP8051_Keil_951\Debug/LCD_Char_1_LCDPort.lst) OT(0) OJ(.\DP8051_Keil_951\Debug\LCD_Char_1_LCDPort.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: LCD_Char_1_LCDPort.c  
   3          * Version 2.20
   4          *
   5          * Description:
   6          *  This file contains API to enable firmware control of a Pins component.
   7          *
   8          * Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "cytypes.h"
  18          #include "LCD_Char_1_LCDPort.h"
  19          
  20          
  21          /*******************************************************************************
  22          * Function Name: LCD_Char_1_LCDPort_Write
  23          ****************************************************************************//**
  24          *
  25          * \brief Writes the value to the physical port (data output register), masking
  26          *  and shifting the bits appropriately. 
  27          *
  28          * The data output register controls the signal applied to the physical pin in 
  29          * conjunction with the drive mode parameter. This function avoids changing 
  30          * other bits in the port by using the appropriate method (read-modify-write or
  31          * bit banding).
  32          *
  33          * <b>Note</b> This function should not be used on a hardware digital output pin 
  34          * as it is driven by the hardware signal attached to it.
  35          *
  36          * \param value
  37          *  Value to write to the component instance.
  38          *
  39          * \return 
  40          *  None 
  41          *
  42          * \sideeffect
  43          *  If you use read-modify-write operations that are not atomic; the Interrupt 
  44          *  Service Routines (ISR) can cause corruption of this function. An ISR that 
  45          *  interrupts this function and performs writes to the Pins component data 
  46          *  register can cause corrupted port data. To avoid this issue, you should 
  47          *  either use the Per-Pin APIs (primary method) or disable interrupts around 
  48          *  this function.
  49          *
  50          * \funcusage
  51          *  \snippet LCD_Char_1_LCDPort_SUT.c usage_LCD_Char_1_LCDPort_Write
  52          *******************************************************************************/
  53          void LCD_Char_1_LCDPort_Write(uint8 value) 
C51 COMPILER V9.51   LCD_CHAR_1_LCDPORT                                                    03/16/2018 17:06:27 PAGE 2   

  54          {
  55   1          uint8 staticBits = (LCD_Char_1_LCDPort_DR & (uint8)(~LCD_Char_1_LCDPort_MASK));
  56   1          LCD_Char_1_LCDPort_DR = staticBits | ((uint8)(value << LCD_Char_1_LCDPort_SHIFT) & LCD_Char_1_LCDPort_
             -MASK);
  57   1      }
  58          
  59          
  60          /*******************************************************************************
  61          * Function Name: LCD_Char_1_LCDPort_SetDriveMode
  62          ****************************************************************************//**
  63          *
  64          * \brief Sets the drive mode for each of the Pins component's pins.
  65          * 
  66          * <b>Note</b> This affects all pins in the Pins component instance. Use the
  67          * Per-Pin APIs if you wish to control individual pin's drive modes.
  68          *
  69          * \param mode
  70          *  Mode for the selected signals. Valid options are documented in 
  71          *  \ref driveMode.
  72          *
  73          * \return
  74          *  None
  75          *
  76          * \sideeffect
  77          *  If you use read-modify-write operations that are not atomic, the ISR can
  78          *  cause corruption of this function. An ISR that interrupts this function 
  79          *  and performs writes to the Pins component Drive Mode registers can cause 
  80          *  corrupted port data. To avoid this issue, you should either use the Per-Pin
  81          *  APIs (primary method) or disable interrupts around this function.
  82          *
  83          * \funcusage
  84          *  \snippet LCD_Char_1_LCDPort_SUT.c usage_LCD_Char_1_LCDPort_SetDriveMode
  85          *******************************************************************************/
  86          void LCD_Char_1_LCDPort_SetDriveMode(uint8 mode) 
  87          {
  88   1              CyPins_SetPinDriveMode(LCD_Char_1_LCDPort_0, mode);
  89   1              CyPins_SetPinDriveMode(LCD_Char_1_LCDPort_1, mode);
  90   1              CyPins_SetPinDriveMode(LCD_Char_1_LCDPort_2, mode);
  91   1              CyPins_SetPinDriveMode(LCD_Char_1_LCDPort_3, mode);
  92   1              CyPins_SetPinDriveMode(LCD_Char_1_LCDPort_4, mode);
  93   1              CyPins_SetPinDriveMode(LCD_Char_1_LCDPort_5, mode);
  94   1              CyPins_SetPinDriveMode(LCD_Char_1_LCDPort_6, mode);
  95   1      }
  96          
  97          
  98          /*******************************************************************************
  99          * Function Name: LCD_Char_1_LCDPort_Read
 100          ****************************************************************************//**
 101          *
 102          * \brief Reads the associated physical port (pin status register) and masks 
 103          *  the required bits according to the width and bit position of the component
 104          *  instance. 
 105          *
 106          * The pin's status register returns the current logic level present on the 
 107          * physical pin.
 108          *
 109          * \return 
 110          *  The current value for the pins in the component as a right justified number.
 111          *
 112          * \funcusage
 113          *  \snippet LCD_Char_1_LCDPort_SUT.c usage_LCD_Char_1_LCDPort_Read  
 114          *******************************************************************************/
C51 COMPILER V9.51   LCD_CHAR_1_LCDPORT                                                    03/16/2018 17:06:27 PAGE 3   

 115          uint8 LCD_Char_1_LCDPort_Read(void) 
 116          {
 117   1          return (LCD_Char_1_LCDPort_PS & LCD_Char_1_LCDPort_MASK) >> LCD_Char_1_LCDPort_SHIFT;
 118   1      }
 119          
 120          
 121          /*******************************************************************************
 122          * Function Name: LCD_Char_1_LCDPort_ReadDataReg
 123          ****************************************************************************//**
 124          *
 125          * \brief Reads the associated physical port's data output register and masks 
 126          *  the correct bits according to the width and bit position of the component 
 127          *  instance. 
 128          *
 129          * The data output register controls the signal applied to the physical pin in 
 130          * conjunction with the drive mode parameter. This is not the same as the 
 131          * preferred LCD_Char_1_LCDPort_Read() API because the 
 132          * LCD_Char_1_LCDPort_ReadDataReg() reads the data register instead of the status 
 133          * register. For output pins this is a useful function to determine the value 
 134          * just written to the pin.
 135          *
 136          * \return 
 137          *  The current value of the data register masked and shifted into a right 
 138          *  justified number for the component instance.
 139          *
 140          * \funcusage
 141          *  \snippet LCD_Char_1_LCDPort_SUT.c usage_LCD_Char_1_LCDPort_ReadDataReg 
 142          *******************************************************************************/
 143          uint8 LCD_Char_1_LCDPort_ReadDataReg(void) 
 144          {
 145   1          return (LCD_Char_1_LCDPort_DR & LCD_Char_1_LCDPort_MASK) >> LCD_Char_1_LCDPort_SHIFT;
 146   1      }
 147          
 148          
 149          /* If interrupt is connected for this Pins component */ 
 150          #if defined(LCD_Char_1_LCDPort_INTSTAT) 
              
                  /*******************************************************************************
                  * Function Name: LCD_Char_1_LCDPort_SetInterruptMode
                  ****************************************************************************//**
                  *
                  * \brief Configures the interrupt mode for each of the Pins component's
                  *  pins. Alternatively you may set the interrupt mode for all the pins
                  *  specified in the Pins component.
                  *
                  *  <b>Note</b> The interrupt is port-wide and therefore any enabled pin
                  *  interrupt may trigger it.
                  *
                  * \param position
                  *  The pin position as listed in the Pins component. You may OR these to be 
                  *  able to configure the interrupt mode of multiple pins within a Pins 
                  *  component. Or you may use LCD_Char_1_LCDPort_INTR_ALL to configure the
                  *  interrupt mode of all the pins in the Pins component.       
                  *  - LCD_Char_1_LCDPort_0_INTR       (First pin in the list)
                  *  - LCD_Char_1_LCDPort_1_INTR       (Second pin in the list)
                  *  - ...
                  *  - LCD_Char_1_LCDPort_INTR_ALL     (All pins in Pins component)
                  *
                  * \param mode
                  *  Interrupt mode for the selected pins. Valid options are documented in
                  *  \ref intrMode.
                  *
C51 COMPILER V9.51   LCD_CHAR_1_LCDPORT                                                    03/16/2018 17:06:27 PAGE 4   

                  * \return 
                  *  None
                  *  
                  * \sideeffect
                  *  It is recommended that the interrupt be disabled before calling this 
                  *  function to avoid unintended interrupt requests. Note that the interrupt
                  *  type is port wide, and therefore will trigger for any enabled pin on the 
                  *  port.
                  *
                  * \funcusage
                  *  \snippet LCD_Char_1_LCDPort_SUT.c usage_LCD_Char_1_LCDPort_SetInterruptMode
                  *******************************************************************************/
                  void LCD_Char_1_LCDPort_SetInterruptMode(uint16 position, uint16 mode) 
                                          
                  {
                              if((position & LCD_Char_1_LCDPort_0_INTR) != 0u) 
                              { 
                                       LCD_Char_1_LCDPort_0_INTTYPE_REG = (uint8)mode; 
                              } 
                              if((position & LCD_Char_1_LCDPort_1_INTR) != 0u) 
                              { 
                                       LCD_Char_1_LCDPort_1_INTTYPE_REG = (uint8)mode; 
                              } 
                              if((position & LCD_Char_1_LCDPort_2_INTR) != 0u) 
                              { 
                                       LCD_Char_1_LCDPort_2_INTTYPE_REG = (uint8)mode; 
                              } 
                              if((position & LCD_Char_1_LCDPort_3_INTR) != 0u) 
                              { 
                                       LCD_Char_1_LCDPort_3_INTTYPE_REG = (uint8)mode; 
                              } 
                              if((position & LCD_Char_1_LCDPort_4_INTR) != 0u) 
                              { 
                                       LCD_Char_1_LCDPort_4_INTTYPE_REG = (uint8)mode; 
                              } 
                              if((position & LCD_Char_1_LCDPort_5_INTR) != 0u) 
                              { 
                                       LCD_Char_1_LCDPort_5_INTTYPE_REG = (uint8)mode; 
                              } 
                              if((position & LCD_Char_1_LCDPort_6_INTR) != 0u) 
                              { 
                                       LCD_Char_1_LCDPort_6_INTTYPE_REG = (uint8)mode; 
                              }
                  }
                  
                  
                  /*******************************************************************************
                  * Function Name: LCD_Char_1_LCDPort_ClearInterrupt
                  ****************************************************************************//**
                  *
                  * \brief Clears any active interrupts attached with the component and returns 
                  *  the value of the interrupt status register allowing determination of which
                  *  pins generated an interrupt event.
                  *
                  * \return 
                  *  The right-shifted current value of the interrupt status register. Each pin 
                  *  has one bit set if it generated an interrupt event. For example, bit 0 is 
                  *  for pin 0 and bit 1 is for pin 1 of the Pins component.
                  *  
                  * \sideeffect
                  *  Clears all bits of the physical port's interrupt status register, not just
                  *  those associated with the Pins component.
C51 COMPILER V9.51   LCD_CHAR_1_LCDPORT                                                    03/16/2018 17:06:27 PAGE 5   

                  *
                  * \funcusage
                  *  \snippet LCD_Char_1_LCDPort_SUT.c usage_LCD_Char_1_LCDPort_ClearInterrupt
                  *******************************************************************************/
                  uint8 LCD_Char_1_LCDPort_ClearInterrupt(void) 
                  {
                      return (LCD_Char_1_LCDPort_INTSTAT & LCD_Char_1_LCDPort_MASK) >> LCD_Char_1_LCDPort_SHIFT;
                  }
              
              #endif /* (LCD_Char_1_LCDPort_INTSTAT) */ 
 249          
 250          
 251          /* [] END OF FILE */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    254    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
