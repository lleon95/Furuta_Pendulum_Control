C51 COMPILER V9.51   CYFLASH                                                               03/16/2018 17:06:28 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFLASH
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\CyFlash.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\CyFlash.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\
                    -DP8051_Keil_951\Debug/CyFlash.lst) OT(0) OJ(.\DP8051_Keil_951\Debug\CyFlash.obj)

line level    source

   1          /***************************************************************************//**
   2          * \file CyFlash.c
   3          * \version 5.70
   4          *
   5          * \brief Provides an API for the FLASH/EEPROM.
   6          *
   7          * \note This code is endian agnostic.
   8          *
   9          * \note Documentation of the API's in this file is located in the System
  10          * Reference Guide provided with PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * \copyright
  14          * Copyright 2008-2018, Cypress Semiconductor Corporation. All rights reserved.
  15          * You may use this file only in accordance with the license, terms, conditions,
  16          * disclaimers, and limitations in the end user license agreement accompanying
  17          * the software package with which this file was provided.
  18          *******************************************************************************/
  19          
  20          #include "CyFlash.h"
  21          
  22          /*  The number of EEPROM arrays */
  23          #define CY_FLASH_EEPROM_NUMBER_ARRAYS                 (1u)
  24          
  25          
  26          /*******************************************************************************
  27          * Holds the die temperature, updated by CySetTemp(). Used for flash writing.
  28          * The first byte is the sign of the temperature (0 = negative, 1 = positive).
  29          * The second byte is the magnitude.
  30          *******************************************************************************/
  31          uint8 dieTemperature[CY_FLASH_DIE_TEMP_DATA_SIZE];
  32          
  33          #if(CYDEV_ECC_ENABLE == 0)
  34              static uint8 * rowBuffer = 0;
  35          #endif  /* (CYDEV_ECC_ENABLE == 0) */
  36          
  37          
  38          static cystatus CySetTempInt(void);
  39          
  40          
  41          /*******************************************************************************
  42          * Function Name: CyFlash_Start
  43          ****************************************************************************//**
  44          *
  45          *  Enable the Flash.
  46          *
  47          *******************************************************************************/
  48          void CyFlash_Start(void) 
  49          {
  50   1          uint8 interruptState;
  51   1      
  52   1          interruptState = CyEnterCriticalSection();
  53   1      
C51 COMPILER V9.51   CYFLASH                                                               03/16/2018 17:06:28 PAGE 2   

  54   1      
  55   1          /***************************************************************************
  56   1          * Enable SPC clock. This also internally enables the 36MHz IMO, since this
  57   1          * is required for the SPC to function.
  58   1          ***************************************************************************/
  59   1          CY_FLASH_PM_ACT_CFG0_REG    |= CY_FLASH_PM_ACT_CFG0_EN_CLK_SPC;
  60   1          CY_FLASH_PM_ALTACT_CFG0_REG |= CY_FLASH_PM_ALTACT_CFG0_EN_CLK_SPC;
  61   1      
  62   1      
  63   1          /***************************************************************************
  64   1          * The wake count defines the number of Bus Clock cycles it takes for the
  65   1          * flash or eeprom to wake up from a low power mode independent of the chip
  66   1          * power mode. Wake up time for these blocks is 5 us.
  67   1          * The granularity of this register is 2 Bus Clock cycles, so a value of 0x1E
  68   1          * (30d) defines the wake up time as 60 cycles of the Bus Clock.
  69   1          * This register needs to be written with a value dependent on the Bus Clock
  70   1          * frequency so that the duration of the cycles is equal to or greater than
  71   1          * the 5 us delay required.
  72   1          ***************************************************************************/
  73   1          CY_FLASH_SPC_FM_EE_WAKE_CNT_REG = CY_FLASH_SPC_FM_EE_WAKE_CNT_80MHZ;
  74   1      
  75   1      
  76   1          /***************************************************************************
  77   1          * Enable flash. Active flash macros consume current, but re-enabling a
  78   1          * disabled flash macro takes 5us. If the CPU attempts to fetch out of the
  79   1          * macro during that time, it will be stalled. This bit allows the flash to
  80   1          * be enabled even if the CPU is disabled, which allows a quicker return to
  81   1          * code execution.
  82   1          ***************************************************************************/
  83   1          CY_FLASH_PM_ACT_CFG12_REG    |= CY_FLASH_PM_ACT_CFG12_EN_FM;
  84   1          CY_FLASH_PM_ALTACT_CFG12_REG |= CY_FLASH_PM_ALTACT_CFG12_EN_FM;
  85   1      
  86   1          while(0u == (CY_FLASH_SPC_FM_EE_CR_REG & CY_FLASH_EE_EE_AWAKE))
  87   1          {
  88   2              /* Non-zero status denotes that the EEPROM/Flash is awake & powered. */
  89   2          }
  90   1      
  91   1          CyExitCriticalSection(interruptState);
  92   1      }
  93          
  94          
  95          /*******************************************************************************
  96          * Function Name: CyFlash_Stop
  97          ****************************************************************************//**
  98          *
  99          *  Disable the Flash.
 100          *
 101          * \sideeffect
 102          *  This setting is ignored as long as the CPU is currently running.  This will
 103          *  only take effect when the CPU is later disabled.
 104          *
 105          *******************************************************************************/
 106          void CyFlash_Stop(void) 
 107          {
 108   1          uint8 interruptState;
 109   1      
 110   1          interruptState = CyEnterCriticalSection();
 111   1      
 112   1          CY_FLASH_PM_ACT_CFG12_REG    &= ((uint8)(~CY_FLASH_PM_ACT_CFG12_EN_FM));
 113   1          CY_FLASH_PM_ALTACT_CFG12_REG &= ((uint8)(~CY_FLASH_PM_ALTACT_CFG12_EN_FM));
 114   1      
 115   1          CyExitCriticalSection(interruptState);
C51 COMPILER V9.51   CYFLASH                                                               03/16/2018 17:06:28 PAGE 3   

 116   1      }
 117          
 118          
 119          /*******************************************************************************
 120          * Function Name: CyFlash_EraseRow
 121          ****************************************************************************//**
 122          *
 123          *  Erases a single row of flash. Reports success or reason for failure. 
 124          *  The API does not return until the erase operation is complete.
 125          *
 126          *  \param arrayID:    ID of the array to erase.
 127          *   The arrays in the part are sequential starting at the first ID for the
 128          *   Flash memory type. 
 129          *  \param rowAddress: Row address within the specified arrayId.
 130          *
 131          *  \return
 132          *  status:
 133          *   CYRET_SUCCESS if successful.
 134          *   CYRET_LOCKED if the SPC is already in use.
 135          *   CYRET_CANCELED if command not accepted
 136          *   CYRET_UNKNOWN if there was an SPC error.
 137          *   CYRET_BAD_PARAM if one or more invalid parameters
 138          *
 139          *******************************************************************************/
 140          cystatus CyFlash_EraseRow(uint8 arrayId, uint16 rowAddress)
 141          {
 142   1          cystatus status = CYRET_SUCCESS;
 143   1      
 144   1          if (arrayId > CY_SPC_LAST_FLASH_ARRAYID)
 145   1          {
 146   2              status = CYRET_BAD_PARAM;
 147   2          }
 148   1          else if(rowAddress > (CY_FLASH_NUMBER_ROWS/CY_FLASH_NUMBER_ARRAYS))
 149   1          {
 150   2              status = CYRET_BAD_PARAM;
 151   2          }        
 152   1          else
 153   1          {
 154   2              if(CySpcLock() == CYRET_SUCCESS)
 155   2              {
 156   3                  /* Erase flash row */
 157   3                  status = CySpcEraseRow(arrayId, rowAddress, dieTemperature[0u], dieTemperature[1u]);
 158   3                  
 159   3                  if(CYRET_STARTED == status)
 160   3                  {
 161   4                      while(CY_SPC_BUSY)
 162   4                      {
 163   5                          /* Wait for SPC to finish and get SPC status */
 164   5                          CyDelayUs(1u);
 165   5                      }
 166   4                      
 167   4                      /* Hide SPC status */
 168   4                      if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 169   4                      {
 170   5                          status = CYRET_SUCCESS;
 171   5                      }
 172   4                      else
 173   4                      {
 174   5                          status = CYRET_UNKNOWN;
 175   5                      }
 176   4                  }
 177   3                      else
C51 COMPILER V9.51   CYFLASH                                                               03/16/2018 17:06:28 PAGE 4   

 178   3                  {
 179   4                      status = CYRET_CANCELED;
 180   4                  }
 181   3                  CySpcUnlock();
 182   3              }
 183   2              else 
 184   2              {
 185   3                  status = CYRET_LOCKED;
 186   3              }
 187   2          }
 188   1          
 189   1          return(status);
 190   1      }
 191          
 192          
 193          /*******************************************************************************
 194          * Function Name: CySetTempInt
 195          ****************************************************************************//**
 196          *
 197          *  Sends a command to the SPC to read the die temperature. Sets a global value
 198          *  used by the Write function. This function must be called once before
 199          *  executing a series of Flash writing functions.
 200          *
 201          * \return
 202          *  status:
 203          *   CYRET_SUCCESS - if successful
 204          *   CYRET_LOCKED  - if Flash writing already in use
 205          *   CYRET_UNKNOWN - if there was an SPC error
 206          *
 207          *******************************************************************************/
 208          static cystatus CySetTempInt(void) 
 209          {
 210   1          cystatus status;
 211   1      
 212   1          /* Make sure SPC is powered */
 213   1          CySpcStart();
 214   1      
 215   1          /* Plan for failure. */
 216   1          status = CYRET_UNKNOWN;
 217   1      
 218   1          if(CySpcLock() == CYRET_SUCCESS)
 219   1          {
 220   2              /* Write the command. */
 221   2              if(CYRET_STARTED == CySpcGetTemp(CY_TEMP_NUMBER_OF_SAMPLES))
 222   2              {
 223   3                  do
 224   3                  {
 225   4                      if(CySpcReadData(dieTemperature, CY_FLASH_DIE_TEMP_DATA_SIZE) == CY_FLASH_DIE_TEMP_DATA_SI
             -ZE)
 226   4                      {
 227   5                          status = CYRET_SUCCESS;
 228   5      
 229   5                          while(CY_SPC_BUSY)
 230   5                          {
 231   6                              /* Spin until idle. */
 232   6                              CyDelayUs(1u);
 233   6                          }
 234   5                          break;
 235   5                      }
 236   4      
 237   4                  } while(CY_SPC_BUSY);
 238   3              }
C51 COMPILER V9.51   CYFLASH                                                               03/16/2018 17:06:28 PAGE 5   

 239   2      
 240   2              CySpcUnlock();
 241   2          }
 242   1          else
 243   1          {
 244   2              status = CYRET_LOCKED;
 245   2          }
 246   1      
 247   1          return (status);
 248   1      }
 249          
 250          
 251          /*******************************************************************************
 252          * Function Name: CyFlashGetSpcAlgorithm
 253          ****************************************************************************//**
 254          *
 255          *  Sends a command to the SPC to download code into RAM.
 256          *
 257          * \return
 258          *  status:
 259          *   CYRET_SUCCESS - if successful
 260          *   CYRET_LOCKED  - if Flash writing already in use
 261          *   CYRET_UNKNOWN - if there was an SPC error
 262          *
 263          *******************************************************************************/
 264          cystatus CyFlashGetSpcAlgorithm(void) 
 265          {
 266   1          cystatus status;
 267   1      
 268   1          /* Make sure SPC is powered */
 269   1          CySpcStart();
 270   1      
 271   1          if(CySpcLock() == CYRET_SUCCESS)
 272   1          {
 273   2              status = CySpcGetAlgorithm();
 274   2      
 275   2              if(CYRET_STARTED == status)
 276   2              {
 277   3                  while(CY_SPC_BUSY)
 278   3                  {
 279   4                      /* Spin until idle. */
 280   4                      CyDelayUs(1u);
 281   4                  }
 282   3      
 283   3                  if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 284   3                  {
 285   4                      status = CYRET_SUCCESS;
 286   4                  }
 287   3              }
 288   2              CySpcUnlock();
 289   2          }
 290   1          else
 291   1          {
 292   2              status = CYRET_LOCKED;
 293   2          }
 294   1      
 295   1          return (status);
 296   1      }
 297          
 298          
 299          /*******************************************************************************
 300          * Function Name: CySetTemp
C51 COMPILER V9.51   CYFLASH                                                               03/16/2018 17:06:28 PAGE 6   

 301          ****************************************************************************//**
 302          *
 303          *  This is a wraparound for CySetTempInt(). It is used to return the second
 304          *  successful read of the temperature value.
 305          *
 306          * \return
 307          *  status:
 308          *   CYRET_SUCCESS if successful.
 309          *   CYRET_LOCKED  if Flash writing already in use
 310          *   CYRET_UNKNOWN if there was an SPC error.
 311          *
 312          *  uint8 dieTemperature[2]:
 313          *   Holds the die temperature for the flash writing algorithm. The first byte is
 314          *   the sign of the temperature (0 = negative, 1 = positive). The second byte is
 315          *   the magnitude.
 316          *
 317          *******************************************************************************/
 318          cystatus CySetTemp(void) 
 319          {
 320   1          cystatus status = CyFlashGetSpcAlgorithm();
 321   1      
 322   1          if(status == CYRET_SUCCESS)
 323   1          {
 324   2              status = CySetTempInt();
 325   2          }
 326   1      
 327   1          return (status);
 328   1      }
 329          
 330          
 331          /*******************************************************************************
 332          * Function Name: CySetFlashEEBuffer
 333          ****************************************************************************//**
 334          *
 335          *  Sets the user supplied temporary buffer to store SPC data while performing
 336          *  Flash and EEPROM commands. This buffer is only necessary when the Flash ECC
 337          *  is disabled.
 338          *
 339          *  \param buffer:
 340          *   The address of a block of memory to store temporary memory. The size of the
 341          *   block of memory is CYDEV_FLS_ROW_SIZE + CYDEV_ECC_ROW_SIZE.
 342          *
 343          * \return
 344          *  status:
 345          *   CYRET_SUCCESS if successful.
 346          *   CYRET_BAD_PARAM if the buffer is NULL
 347          *
 348          *******************************************************************************/
 349          cystatus CySetFlashEEBuffer(uint8 * buffer) 
 350          {
 351   1          cystatus status = CYRET_SUCCESS;
 352   1      
 353   1          CySpcStart();
 354   1      
 355   1          #if(CYDEV_ECC_ENABLE == 0)
 356   1      
 357   1              if(NULL == buffer)
 358   1              {
 359   2                  rowBuffer = rowBuffer;
 360   2                  status = CYRET_BAD_PARAM;
 361   2              }
 362   1              else if(CySpcLock() != CYRET_SUCCESS)
C51 COMPILER V9.51   CYFLASH                                                               03/16/2018 17:06:28 PAGE 7   

 363   1              {
 364   2                  rowBuffer = rowBuffer;
 365   2                  status = CYRET_LOCKED;
 366   2              }
 367   1              else
 368   1              {
 369   2                  rowBuffer = buffer;
 370   2                  CySpcUnlock();
 371   2              }
 372   1      
 373   1          #else
              
                      /* To suppress warning */
                      buffer = buffer;
              
                  #endif  /* (CYDEV_ECC_ENABLE == 0u) */
 379   1      
 380   1          return(status);
 381   1      }
 382          
 383          
 384          /*******************************************************************************
 385          * Function Name: CyWriteRowData
 386          ****************************************************************************//**
 387          *
 388          *  Sends a command to the SPC to load and program a row of data in
 389          *  Flash or EEPROM.
 390          *
 391          *  \param arrayID:    ID of the array to write.
 392          *   The type of write, Flash or EEPROM, is determined from the array ID.
 393          *   The arrays in the part are sequential starting at the first ID for the
 394          *   specific memory type. The array ID for the Flash memory lasts from 0x00 to
 395          *   0x3F and for the EEPROM memory it lasts from 0x40 to 0x7F.
 396          *  \param rowAddress: rowAddress of flash row to program.
 397          *  \param rowData:    Array of bytes to write.
 398          *
 399          * \return
 400          *  status:
 401          *   CYRET_SUCCESS if successful.
 402          *   CYRET_LOCKED if the SPC is already in use.
 403          *   CYRET_CANCELED if command not accepted
 404          *   CYRET_UNKNOWN if there was an SPC error.
 405          *
 406          *******************************************************************************/
 407          cystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, const uint8 * rowData) 
 408          {
 409   1          uint16 rowSize;
 410   1          cystatus status;
 411   1      
 412   1          rowSize = (arrayId > CY_SPC_LAST_FLASH_ARRAYID) ? CYDEV_EEPROM_ROW_SIZE : CYDEV_FLS_ROW_SIZE;
 413   1          status = CyWriteRowFull(arrayId, rowAddress, rowData, rowSize);
 414   1      
 415   1          return(status);
 416   1      }
 417          
 418          
 419          /*******************************************************************
 420          * If "Enable Error Correcting Code (ECC)" and "Store Configuration
 421          * Data in ECC" DWR options are disabled, ECC section is available
 422          * for user data.
 423          *******************************************************************/
 424          #if ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u))
C51 COMPILER V9.51   CYFLASH                                                               03/16/2018 17:06:28 PAGE 8   

 425          
 426              /*******************************************************************************
 427              * Function Name: CyWriteRowConfig
 428              ****************************************************************************//**
 429              *
 430              *  Sends a command to the SPC to load and program a row of config data in the
 431              *  Flash. This function is only valid for Flash array IDs (not for EEPROM).
 432              *
 433              *  \param arrayId:      ID of the array to write
 434              *   The arrays in the part are sequential starting at the first ID for the
 435              *   specific memory type. The array ID for the Flash memory lasts
 436              *   from 0x00 to 0x3F.
 437              *  \param rowAddress:   The address of the sector to erase.
 438              *  \param rowECC:       The array of bytes to write.
 439              *
 440              * \return
 441              *  status:
 442              *   CYRET_SUCCESS if successful.
 443              *   CYRET_LOCKED if the SPC is already in use.
 444              *   CYRET_CANCELED if command not accepted
 445              *   CYRET_UNKNOWN if there was an SPC error.
 446              *
 447              *******************************************************************************/
 448              cystatus CyWriteRowConfig(uint8 arrayId, uint16 rowAddress, const uint8 * rowECC)\
 449              
 450              {
 451   1              cystatus status;
 452   1      
 453   1              status = CyWriteRowFull(arrayId, rowAddress, rowECC, CYDEV_ECC_ROW_SIZE);
 454   1      
 455   1              return (status);
 456   1          }
 457          
 458          #endif  /* ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u)) */
 459          
 460          
 461          
 462          /*******************************************************************************
 463          * Function Name: CyWriteRowFull
 464          ****************************************************************************//**
 465          *  Sends a command to the SPC to load and program a row of data in the Flash.
 466          *  rowData array is expected to contain Flash and ECC data if needed.
 467          *
 468          *  \param arrayId:    FLASH or EEPROM array id.
 469          *  \param rowData:    Pointer to a row of data to write.
 470          *  \param rowNumber:  Zero based number of the row.
 471          *  \param rowSize:    Size of the row.
 472          *
 473          * \return
 474          *  CYRET_SUCCESS if successful.
 475          *  CYRET_LOCKED if the SPC is already in use.
 476          *  CYRET_CANCELED if command not accepted
 477          *  CYRET_UNKNOWN if there was an SPC error.
 478          *
 479          *******************************************************************************/
 480          cystatus CyWriteRowFull(uint8 arrayId, uint16 rowNumber, const uint8* rowData, uint16 rowSize) \
 481                  
 482          {
 483   1          cystatus status = CYRET_SUCCESS;
 484   1      
 485   1          if((arrayId <=  CY_SPC_LAST_FLASH_ARRAYID) && (arrayId > (CY_FLASH_NUMBER_ARRAYS  + CY_SPC_FIRST_FLASH
             -_ARRAYID)))
C51 COMPILER V9.51   CYFLASH                                                               03/16/2018 17:06:28 PAGE 9   

 486   1          {
 487   2              status = CYRET_BAD_PARAM;
 488   2          }
 489   1      
 490   1          if(arrayId > CY_SPC_LAST_EE_ARRAYID)
 491   1          {
 492   2              status = CYRET_BAD_PARAM;
 493   2          }
 494   1      
 495   1          if((arrayId >= CY_SPC_FIRST_EE_ARRAYID) && (arrayId > (CY_FLASH_EEPROM_NUMBER_ARRAYS + CY_SPC_FIRST_EE
             -_ARRAYID)))
 496   1          {
 497   2              status = CYRET_BAD_PARAM;
 498   2          }
 499   1      
 500   1          if(arrayId <=  CY_SPC_LAST_FLASH_ARRAYID)
 501   1          {
 502   2              /* Flash */
 503   2              if(rowNumber > (CY_FLASH_NUMBER_ROWS/CY_FLASH_NUMBER_ARRAYS))
 504   2              {
 505   3                  status = CYRET_BAD_PARAM;
 506   3              }
 507   2          }
 508   1          else
 509   1          {
 510   2              /* EEPROM */
 511   2              if(rowNumber > (CY_EEPROM_NUMBER_ROWS/CY_FLASH_EEPROM_NUMBER_ARRAYS))
 512   2              {
 513   3                  status = CYRET_BAD_PARAM;
 514   3              }
 515   2      
 516   2              if(CY_EEPROM_SIZEOF_ROW != rowSize)
 517   2              {
 518   3                  status = CYRET_BAD_PARAM;
 519   3              }
 520   2          }
 521   1      
 522   1          if(rowData == NULL)
 523   1          {
 524   2              status = CYRET_BAD_PARAM;
 525   2          }
 526   1      
 527   1      
 528   1          if(status == CYRET_SUCCESS)
 529   1          {
 530   2              if(CySpcLock() == CYRET_SUCCESS)
 531   2              {
 532   3                  /* Load row data into SPC internal latch */
 533   3                  status = CySpcLoadRowFull(arrayId, rowNumber, rowData, rowSize);
 534   3      
 535   3                  if(CYRET_STARTED == status)
 536   3                  {
 537   4                      while(CY_SPC_BUSY)
 538   4                      {
 539   5                          /* Wait for SPC to finish and get SPC status */
 540   5                          CyDelayUs(1u);
 541   5                      }
 542   4      
 543   4                      /* Hide SPC status */
 544   4                      if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 545   4                      {
 546   5                          status = CYRET_SUCCESS;
C51 COMPILER V9.51   CYFLASH                                                               03/16/2018 17:06:28 PAGE 10  

 547   5                      }
 548   4                      else
 549   4                      {
 550   5                          status = CYRET_UNKNOWN;
 551   5                      }
 552   4      
 553   4                      if(CYRET_SUCCESS == status)
 554   4                      {
 555   5                          /* Erase and program flash with data from SPC interval latch */
 556   5                          status = CySpcWriteRow(arrayId, rowNumber, dieTemperature[0u], dieTemperature[1u]);
 557   5      
 558   5                          if(CYRET_STARTED == status)
 559   5                          {
 560   6                              while(CY_SPC_BUSY)
 561   6                              {
 562   7                                  /* Wait for SPC to finish and get SPC status */
 563   7                                  CyDelayUs(1u);
 564   7                              }
 565   6      
 566   6                              /* Hide SPC status */
 567   6                              if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 568   6                              {
 569   7                                  status = CYRET_SUCCESS;
 570   7                              }
 571   6                              else
 572   6                              {
 573   7                                  status = CYRET_UNKNOWN;
 574   7                              }
 575   6                          }
 576   5                      }
 577   4                  }
 578   3                  CySpcUnlock();
 579   3              }   /* if(CySpcLock() == CYRET_SUCCESS) */
 580   2              else
 581   2              {
 582   3                  status = CYRET_LOCKED;
 583   3              }
 584   2          }
 585   1      
 586   1          return(status);
 587   1      }
 588          
 589          
 590          /*******************************************************************************
 591          * Function Name: CyFlash_SetWaitCycles
 592          ****************************************************************************//**
 593          *
 594          *  Sets the number of clock cycles the cache will wait before it samples data
 595          *  coming back from the Flash. This function must be called before increasing
 596          *  the CPU clock frequency. It can optionally be called after lowering the CPU
 597          *  clock frequency in order to improve the CPU performance.
 598          *
 599          *  \param uint8 freq:
 600          *   Frequency of operation in Megahertz.
 601          *
 602          *******************************************************************************/
 603          void CyFlash_SetWaitCycles(uint8 freq) 
 604          {
 605   1          uint8 interruptState;
 606   1      
 607   1          /* Save current global interrupt enable and disable it */
 608   1          interruptState = CyEnterCriticalSection();
C51 COMPILER V9.51   CYFLASH                                                               03/16/2018 17:06:28 PAGE 11  

 609   1      
 610   1          /***************************************************************************
 611   1          * The number of clock cycles the cache will wait before it samples data
 612   1          * coming back from the Flash must be equal or greater to to the CPU frequency
 613   1          * outlined in clock cycles.
 614   1          ***************************************************************************/
 615   1      
 616   1          if (freq < CY_FLASH_CACHE_WS_1_FREQ_MAX)
 617   1          {
 618   2              CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
 619   2                                          CY_FLASH_CACHE_WS_1_VALUE_MASK;
 620   2          }
 621   1          else if (freq < CY_FLASH_CACHE_WS_2_FREQ_MAX)
 622   1          {
 623   2              CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
 624   2                                          CY_FLASH_CACHE_WS_2_VALUE_MASK;
 625   2          }
 626   1          else if (freq < CY_FLASH_CACHE_WS_3_FREQ_MAX)
 627   1          {
 628   2              CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
 629   2                                          CY_FLASH_CACHE_WS_3_VALUE_MASK;
 630   2          }
 631   1      #if (CY_PSOC5)
                  else if (freq < CY_FLASH_CACHE_WS_4_FREQ_MAX)
                  {
                      CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
                                                  CY_FLASH_CACHE_WS_4_VALUE_MASK;
                  }
                  else if (freq <= CY_FLASH_CACHE_WS_5_FREQ_MAX)
                  {
                      CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
                                                  CY_FLASH_CACHE_WS_5_VALUE_MASK;
                  }
              #endif  /* (CY_PSOC5) */
 643   1          else
 644   1          {
 645   2              /* Halt CPU in debug mode if frequency is invalid */
 646   2              CYASSERT(0u != 0u);
 647   2          }
 648   1      
 649   1          /* Restore global interrupt enable state */
 650   1          CyExitCriticalSection(interruptState);
 651   1      }
 652          
 653          
 654          /*******************************************************************************
 655          * Function Name: CyEEPROM_Start
 656          ****************************************************************************//**
 657          *
 658          *  Enable the EEPROM.
 659          *
 660          *******************************************************************************/
 661          void CyEEPROM_Start(void) 
 662          {
 663   1          uint8 interruptState;
 664   1      
 665   1          interruptState = CyEnterCriticalSection();
 666   1      
 667   1      
 668   1          /***************************************************************************
 669   1          * Enable SPC clock. This also internally enables the 36MHz IMO, since this
 670   1          * is required for the SPC to function.
C51 COMPILER V9.51   CYFLASH                                                               03/16/2018 17:06:28 PAGE 12  

 671   1          ***************************************************************************/
 672   1          CY_FLASH_PM_ACT_CFG0_REG    |= CY_FLASH_PM_ACT_CFG0_EN_CLK_SPC;
 673   1          CY_FLASH_PM_ALTACT_CFG0_REG |= CY_FLASH_PM_ALTACT_CFG0_EN_CLK_SPC;
 674   1      
 675   1      
 676   1          /***************************************************************************
 677   1          * The wake count defines the number of Bus Clock cycles it takes for the
 678   1          * flash or EEPROM to wake up from a low power mode independent of the chip
 679   1          * power mode. Wake up time for these blocks is 5 us.
 680   1          * The granularity of this register is 2 Bus Clock cycles, so a value of 0x1E
 681   1          * (30d) defines the wake up time as 60 cycles of the Bus Clock.
 682   1          * This register needs to be written with a value dependent on the Bus Clock
 683   1          * frequency so that the duration of the cycles is equal to or greater than
 684   1          * the 5 us delay required.
 685   1          ***************************************************************************/
 686   1          CY_FLASH_SPC_FM_EE_WAKE_CNT_REG = CY_FLASH_SPC_FM_EE_WAKE_CNT_80MHZ;
 687   1      
 688   1      
 689   1          /***************************************************************************
 690   1          * Enable EEPROM. Re-enabling an EEPROM macro takes 5us. During this time,
 691   1          * the EE will not acknowledge a PHUB request.
 692   1          ***************************************************************************/
 693   1          CY_FLASH_PM_ACT_CFG12_REG    |= CY_FLASH_PM_ACT_CFG12_EN_EE;
 694   1          CY_FLASH_PM_ALTACT_CFG12_REG |= CY_FLASH_PM_ALTACT_CFG12_EN_EE;
 695   1      
 696   1          while(0u == (CY_FLASH_SPC_FM_EE_CR_REG & CY_FLASH_EE_EE_AWAKE))
 697   1          {
 698   2              /* Non-zero status denotes that the EEPROM/Flash is awake & powered. */
 699   2          }
 700   1      
 701   1          CyExitCriticalSection(interruptState);
 702   1      }
 703          
 704          
 705          /*******************************************************************************
 706          * Function Name: CyEEPROM_Stop
 707          ****************************************************************************//**
 708          *
 709          *  Disable the EEPROM.
 710          *
 711          *******************************************************************************/
 712          void CyEEPROM_Stop (void) 
 713          {
 714   1          uint8 interruptState;
 715   1      
 716   1          interruptState = CyEnterCriticalSection();
 717   1      
 718   1          CY_FLASH_PM_ACT_CFG12_REG    &= ((uint8)(~CY_FLASH_PM_ACT_CFG12_EN_EE));
 719   1          CY_FLASH_PM_ALTACT_CFG12_REG &= ((uint8)(~CY_FLASH_PM_ALTACT_CFG12_EN_EE));
 720   1      
 721   1          CyExitCriticalSection(interruptState);
 722   1      }
 723          
 724          
 725          /*******************************************************************************
 726          * Function Name: CyEEPROM_ReadReserve
 727          ****************************************************************************//**
 728          *
 729          *  Request access to the EEPROM for reading and wait until access is available.
 730          *
 731          *******************************************************************************/
 732          void CyEEPROM_ReadReserve(void) 
C51 COMPILER V9.51   CYFLASH                                                               03/16/2018 17:06:28 PAGE 13  

 733          {
 734   1          /* Make request for PHUB to have access */
 735   1          CY_FLASH_EE_SCR_REG |= CY_FLASH_EE_SCR_AHB_EE_REQ;
 736   1      
 737   1          while (0u == (CY_FLASH_EE_SCR_REG & CY_FLASH_EE_SCR_AHB_EE_ACK))
 738   1          {
 739   2              /* Wait for acknowledgment from PHUB */
 740   2          }
 741   1      }
 742          
 743          
 744          /*******************************************************************************
 745          * Function Name: CyEEPROM_ReadRelease
 746          ****************************************************************************//**
 747          *
 748          *  Release the read reservation of the EEPROM.
 749          *
 750          *******************************************************************************/
 751          void CyEEPROM_ReadRelease(void) 
 752          {
 753   1          CY_FLASH_EE_SCR_REG &= (uint8)(~CY_FLASH_EE_SCR_AHB_EE_REQ);
 754   1      }
 755          
 756          
 757          /* [] END OF FILE */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1735    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     47    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
