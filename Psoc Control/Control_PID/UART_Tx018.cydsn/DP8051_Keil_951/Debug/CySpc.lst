C51 COMPILER V9.51   CYSPC                                                                 03/16/2018 17:06:29 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYSPC
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\CySpc.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\CySpc.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP
                    -8051_Keil_951\Debug/CySpc.lst) OT(0) OJ(.\DP8051_Keil_951\Debug\CySpc.obj)

line level    source

   1          /***************************************************************************//**
   2          * \file CySpc.c
   3          * \version 5.70
   4          *
   5          * \brief Provides an API for the System Performance Component.
   6          * The SPC functions are not meant to be called directly by the user
   7          * application.
   8          *
   9          ********************************************************************************
  10          * \copyright
  11          * Copyright 2008-2018, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "CySpc.h"
  18          
  19          #define CY_SPC_KEY_ONE                      (0xB6u)
  20          #define CY_SPC_KEY_TWO(x)                   ((uint8) (((uint16) 0xD3u) + ((uint16) (x))))
  21          
  22          /* Command Codes */
  23          #define CY_SPC_CMD_LD_BYTE                  (0x00u)
  24          #define CY_SPC_CMD_LD_MULTI_BYTE            (0x01u)
  25          #define CY_SPC_CMD_LD_ROW                   (0x02u)
  26          #define CY_SPC_CMD_RD_BYTE                  (0x03u)
  27          #define CY_SPC_CMD_RD_MULTI_BYTE            (0x04u)
  28          #define CY_SPC_CMD_WR_ROW                   (0x05u)
  29          #define CY_SPC_CMD_WR_USER_NVL              (0x06u)
  30          #define CY_SPC_CMD_PRG_ROW                  (0x07u)
  31          #define CY_SPC_CMD_ER_SECTOR                (0x08u)
  32          #define CY_SPC_CMD_ER_ALL                   (0x09u)
  33          #define CY_SPC_CMD_RD_HIDDEN                (0x0Au)
  34          #define CY_SPC_CMD_PRG_PROTECT              (0x0Bu)
  35          #define CY_SPC_CMD_CHECKSUM                 (0x0Cu)
  36          #define CY_SPC_CMD_DWNLD_ALGORITHM          (0x0Du)
  37          #define CY_SPC_CMD_GET_TEMP                 (0x0Eu)
  38          #define CY_SPC_CMD_GET_ADC                  (0x0Fu)
  39          #define CY_SPC_CMD_RD_NVL_VOLATILE          (0x10u)
  40          #define CY_SPC_CMD_SETUP_TS                 (0x11u)
  41          #define CY_SPC_CMD_DISABLE_TS               (0x12u)
  42          #define CY_SPC_CMD_ER_ROW                   (0x13u)
  43          
  44          /* Enable bit in Active and Alternate Active mode templates */
  45          #define PM_SPC_PM_EN                        (0x08u)
  46          
  47          /* Gate calls to the SPC. */
  48          uint8 SpcLockState = CY_SPC_UNLOCKED;
  49          
  50          
  51          #if(CY_PSOC5)
              
                  /***************************************************************************
C51 COMPILER V9.51   CYSPC                                                                 03/16/2018 17:06:29 PAGE 2   

                  * The wait-state pipeline must be enabled prior to accessing the SPC
                  * register interface regardless of CPU frequency. The CySpcLock() saves
                  * current wait-state pipeline state and enables it. The CySpcUnlock()
                  * function, which must be called after SPC transaction, restores original
                  * state.
                  ***************************************************************************/
                  static uint32 spcWaitPipeBypass = 0u;
              
              #endif  /* (CY_PSOC5) */
  63          
  64          
  65          /*******************************************************************************
  66          * Function Name: CySpcStart
  67          ****************************************************************************//**
  68          *  Starts the SPC.
  69          *
  70          *******************************************************************************/
  71          void CySpcStart(void) 
  72          {
  73   1          /* Save current global interrupt enable and disable it */
  74   1          uint8 interruptState = CyEnterCriticalSection();
  75   1      
  76   1          CY_SPC_PM_ACT_REG  |= PM_SPC_PM_EN;
  77   1          CY_SPC_PM_STBY_REG |= PM_SPC_PM_EN;
  78   1      
  79   1          /* Restore global interrupt enable state */
  80   1          CyExitCriticalSection(interruptState);
  81   1      }
  82          
  83          
  84          /*******************************************************************************
  85          * Function Name: CySpcStop
  86          ****************************************************************************//**
  87          *  Stops the SPC.
  88          *
  89          *******************************************************************************/
  90          void CySpcStop(void) 
  91          {
  92   1          /* Save current global interrupt enable and disable it */
  93   1          uint8 interruptState = CyEnterCriticalSection();
  94   1      
  95   1          CY_SPC_PM_ACT_REG  &= ((uint8)(~PM_SPC_PM_EN));
  96   1          CY_SPC_PM_STBY_REG &= ((uint8)(~PM_SPC_PM_EN));
  97   1      
  98   1          /* Restore global interrupt enable state */
  99   1          CyExitCriticalSection(interruptState);
 100   1      }
 101          
 102          
 103          /*******************************************************************************
 104          * Function Name: CySpcReadData
 105          ****************************************************************************//**
 106          *  Reads data from the SPC.
 107          *
 108          *  \param uint8 buffer:
 109          *   Address to store data read.
 110          *
 111          *  \param uint8 size:
 112          *   Number of bytes to read from the SPC.
 113          *
 114          * \return
 115          *  uint8:
C51 COMPILER V9.51   CYSPC                                                                 03/16/2018 17:06:29 PAGE 3   

 116          *   The number of bytes read from the SPC.
 117          *
 118          *******************************************************************************/
 119          uint8 CySpcReadData(uint8 buffer[], uint8 size) 
 120          {
 121   1          uint8 i;
 122   1      
 123   1          for(i = 0u; i < size; i++)
 124   1          {
 125   2              while(!CY_SPC_DATA_READY)
 126   2              {
 127   3                  CyDelayUs(1u);
 128   3              }
 129   2              buffer[i] = CY_SPC_CPU_DATA_REG;
 130   2          }
 131   1      
 132   1          return(i);
 133   1      }
 134          
 135          
 136          /*******************************************************************************
 137          * Function Name: CySpcLoadMultiByte
 138          ****************************************************************************//**
 139          *  Loads 1 to 32 bytes of data into the row latch of a Flash/EEPROM array.
 140          *
 141          *  \param uint8 array:
 142          *   Id of the array.
 143          *
 144          *  \param uint16 address:
 145          *   Flash/eeprom addrress
 146          *
 147          *  \param uint8* buffer:
 148          *   Data to load to the row latch
 149          *
 150          *  \param uint16 number:
 151          *   Number bytes to load.
 152          *
 153          * \return
 154          *  CYRET_STARTED
 155          *  CYRET_CANCELED
 156          *  CYRET_LOCKED
 157          *  CYRET_BAD_PARAM
 158          *
 159          *******************************************************************************/
 160          cystatus CySpcLoadMultiByte(uint8 array, uint16 address, const uint8 buffer[], uint8 size)\
 161          
 162          {
 163   1          cystatus status = CYRET_STARTED;
 164   1          uint8 i;
 165   1      
 166   1          /***************************************************************************
 167   1          * Check if number is correct for array. Number must be less than
 168   1          * 32 for Flash or less than 16 for EEPROM.
 169   1          ***************************************************************************/
 170   1          if(((array < CY_SPC_LAST_FLASH_ARRAYID) && (size < 32u)) ||
 171   1             ((array > CY_SPC_LAST_FLASH_ARRAYID) && (size < 16u)))
 172   1          {
 173   2              if(CY_SPC_IDLE)
 174   2              {
 175   3                  CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 176   3                  CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_MULTI_BYTE);
 177   3                  CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_MULTI_BYTE;
C51 COMPILER V9.51   CYSPC                                                                 03/16/2018 17:06:29 PAGE 4   

 178   3      
 179   3                  if(CY_SPC_BUSY)
 180   3                  {
 181   4                      CY_SPC_CPU_DATA_REG = array;
 182   4                      CY_SPC_CPU_DATA_REG = 1u & HI8(address);
 183   4                      CY_SPC_CPU_DATA_REG = LO8(address);
 184   4                      CY_SPC_CPU_DATA_REG = ((uint8)(size - 1u));
 185   4      
 186   4                      for(i = 0u; i < size; i++)
 187   4                      {
 188   5                          CY_SPC_CPU_DATA_REG = buffer[i];
 189   5                      }
 190   4                  }
 191   3                  else
 192   3                  {
 193   4                      status = CYRET_CANCELED;
 194   4                  }
 195   3              }
 196   2              else
 197   2              {
 198   3                  status = CYRET_LOCKED;
 199   3              }
 200   2          }
 201   1          else
 202   1          {
 203   2              status = CYRET_BAD_PARAM;
 204   2          }
 205   1      
 206   1          return(status);
 207   1      }
 208          
 209          
 210          /*******************************************************************************
 211          * Function Name: CySpcLoadRow
 212          ****************************************************************************//**
 213          *  Loads a row of data into the row latch of a Flash/EEPROM array.
 214          *
 215          *  The buffer pointer should point to the data that should be written to the
 216          *  flash row directly (no data in ECC/flash will be preserved). It is Flash API
 217          *  responsibility to prepare data: the preserved data are copied from flash into
 218          *  array with the modified data.
 219          *
 220          *  \param uint8 array:
 221          *   Id of the array.
 222          *
 223          *  \param uint8* buffer:
 224          *   Data to be loaded to the row latch
 225          *
 226          *  \param uint8 size:
 227          *   The number of data bytes that the SPC expects to be written. Depends on the
 228          *   type of the array and, if the array is Flash, whether ECC is being enabled
 229          *   or not. There are following values: flash row latch size with ECC enabled,
 230          *   flash row latch size with ECC disabled and EEPROM row latch size.
 231          *
 232          * \return
 233          *  CYRET_STARTED
 234          *  CYRET_CANCELED
 235          *  CYRET_LOCKED
 236          *
 237          *******************************************************************************/
 238          cystatus CySpcLoadRow(uint8 array, const uint8 buffer[], uint16 size)
 239          {
C51 COMPILER V9.51   CYSPC                                                                 03/16/2018 17:06:29 PAGE 5   

 240   1          cystatus status = CYRET_STARTED;
 241   1          uint16 i;
 242   1      
 243   1          /* Make sure the SPC is ready to accept command */
 244   1          if(CY_SPC_IDLE)
 245   1          {
 246   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 247   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_ROW);
 248   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_ROW;
 249   2      
 250   2              /* Make sure the command was accepted */
 251   2              if(CY_SPC_BUSY)
 252   2              {
 253   3                  CY_SPC_CPU_DATA_REG = array;
 254   3      
 255   3                  for(i = 0u; i < size; i++)
 256   3                  {
 257   4                      CY_SPC_CPU_DATA_REG = buffer[i];
 258   4                  }
 259   3              }
 260   2              else
 261   2              {
 262   3                  status = CYRET_CANCELED;
 263   3              }
 264   2          }
 265   1          else
 266   1          {
 267   2              status = CYRET_LOCKED;
 268   2          }
 269   1      
 270   1          return(status);
 271   1      }
 272          
 273          
 274          /*******************************************************************************
 275          * Function Name: CySpcLoadRowFull
 276          ****************************************************************************//**
 277          *  Loads a row of data into the row latch of a Flash/EEPROM array.
 278          *
 279          *  The only data that are going to be changed should be passed. The function
 280          *  will handle unmodified data preservation based on DWR settings and input
 281          *  parameters.
 282          *
 283          *  \param uint8 array:
 284          *   Id of the array.
 285          *
 286          *  \param uint16 row:
 287          *   Flash row number to be loaded.
 288          *
 289          *  \param uint8* buffer:
 290          *   Data to be loaded to the row latch
 291          *
 292          *  \param uint8 size:
 293          *   The number of data bytes that the SPC expects to be written. Depends on the
 294          *   type of the array and, if the array is Flash, whether ECC is being enabled
 295          *   or not. There are following values: flash row latch size with ECC enabled,
 296          *   flash row latch size with ECC disabled and EEPROM row latch size.
 297          *
 298          * \return
 299          *  CYRET_STARTED
 300          *  CYRET_CANCELED
 301          *  CYRET_LOCKED
C51 COMPILER V9.51   CYSPC                                                                 03/16/2018 17:06:29 PAGE 6   

 302          *
 303          *******************************************************************************/
 304          cystatus CySpcLoadRowFull(uint8 array, uint16 row, const uint8 buffer[], uint16 size)\
 305          
 306          {
 307   1          cystatus status = CYRET_STARTED;
 308   1          uint16 i;
 309   1      
 310   1          #if (CYDEV_ECC_ENABLE == 0)
 311   1              uint32 offset;
 312   1          #endif /* (CYDEV_ECC_ENABLE == 0) */
 313   1      
 314   1          /* Make sure the SPC is ready to accept command */
 315   1          if(CY_SPC_IDLE)
 316   1          {
 317   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 318   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_ROW);
 319   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_ROW;
 320   2      
 321   2              /* Make sure the command was accepted */
 322   2              if(CY_SPC_BUSY)
 323   2              {
 324   3                  CY_SPC_CPU_DATA_REG = array;
 325   3      
 326   3                  /*******************************************************************
 327   3                  * If "Enable Error Correcting Code (ECC)" and "Store Configuration
 328   3                  * Data in ECC" DWR options are disabled, ECC section is available
 329   3                  * for user data.
 330   3                  *******************************************************************/
 331   3                  #if ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u))
 332   3      
 333   3                      /*******************************************************************
 334   3                      * If size parameter equals size of the ECC row and selected array
 335   3                      * identification corresponds to the flash array (but not to EEPROM
 336   3                      * array) then data are going to be written to the ECC section.
 337   3                      * In this case flash data must be preserved. The flash data copied
 338   3                      * from flash data section to the SPC data register.
 339   3                      *******************************************************************/
 340   3                      if ((size == CYDEV_ECC_ROW_SIZE) && (array <= CY_SPC_LAST_FLASH_ARRAYID))
 341   3                      {
 342   4                          offset = CYDEV_FLS_BASE +
 343   4                                   ((uint32) array * CYDEV_FLS_SECTOR_SIZE) +
 344   4                                   ((uint32)   row * CYDEV_FLS_ROW_SIZE   );
 345   4      
 346   4                          for (i = 0u; i < CYDEV_FLS_ROW_SIZE; i++)
 347   4                          {
 348   5                              CY_SPC_CPU_DATA_REG = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
 349   5                          }
 350   4                      }
 351   3      
 352   3                  #endif /* ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u)) */
 353   3      
 354   3      
 355   3                  for(i = 0u; i < size; i++)
 356   3                  {
 357   4                      CY_SPC_CPU_DATA_REG = buffer[i];
 358   4                  }
 359   3      
 360   3      
 361   3                  /*******************************************************************
 362   3                  * If "Enable Error Correcting Code (ECC)" DWR option is disabled,
 363   3                  * ECC section can be used for storing device configuration data
C51 COMPILER V9.51   CYSPC                                                                 03/16/2018 17:06:29 PAGE 7   

 364   3                  * ("Store Configuration Data in ECC" DWR option is enabled) or for
 365   3                  * storing user data in the ECC section ("Store Configuration Data in
 366   3                  * ECC" DWR option is enabled). In both cases, the data in the ECC
 367   3                  * section must be preserved if flash data is written.
 368   3                  *******************************************************************/
 369   3                  #if (CYDEV_ECC_ENABLE == 0)
 370   3      
 371   3      
 372   3                      /*******************************************************************
 373   3                      * If size parameter equals size of the flash row and selected array
 374   3                      * identification corresponds to the flash array (but not to EEPROM
 375   3                      * array) then data are going to be written to the flash data
 376   3                      * section. In this case, ECC section data must be preserved.
 377   3                      * The ECC section data copied from ECC section to the SPC data
 378   3                      * register.
 379   3                      *******************************************************************/
 380   3                      if ((size == CYDEV_FLS_ROW_SIZE) && (array <= CY_SPC_LAST_FLASH_ARRAYID))
 381   3                      {
 382   4                          offset = CYDEV_ECC_BASE +
 383   4                                  ((uint32) array * CYDEV_ECC_SECTOR_SIZE) +
 384   4                                  ((uint32) row   * CYDEV_ECC_ROW_SIZE   );
 385   4      
 386   4                          for (i = 0u; i < CYDEV_ECC_ROW_SIZE; i++)
 387   4                          {
 388   5                              CY_SPC_CPU_DATA_REG = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
 389   5                          }
 390   4                      }
 391   3      
 392   3                  #else
              
                              if(0u != row)
                              {
                                  /* To remove unreferenced local variable warning */
                              }
              
                          #endif /* (CYDEV_ECC_ENABLE == 0) */
 400   3              }
 401   2              else
 402   2              {
 403   3                  status = CYRET_CANCELED;
 404   3              }
 405   2          }
 406   1          else
 407   1          {
 408   2              status = CYRET_LOCKED;
 409   2          }
 410   1      
 411   1          return(status);
 412   1      }
 413          
 414          
 415          /*******************************************************************************
 416          * Function Name: CySpcWriteRow
 417          ****************************************************************************//**
 418          *  Erases then programs a row in Flash/EEPROM with data in row latch.
 419          *
 420          *  \param uint8 array:
 421          *   Id of the array.
 422          *
 423          *  \param uint16 address:
 424          *   flash/eeprom addrress
 425          *
C51 COMPILER V9.51   CYSPC                                                                 03/16/2018 17:06:29 PAGE 8   

 426          *  \param uint8 tempPolarity:
 427          *   temperature polarity.
 428          *   \param 1: the Temp Magnitude is interpreted as a positive value
 429          *   \param 0: the Temp Magnitude is interpreted as a negative value
 430          *
 431          *  \param uint8 tempMagnitude:
 432          *   temperature magnitude.
 433          *
 434          * \return
 435          *  CYRET_STARTED
 436          *  CYRET_CANCELED
 437          *  CYRET_LOCKED
 438          *
 439          *******************************************************************************/
 440          cystatus CySpcWriteRow(uint8 array, uint16 address, uint8 tempPolarity, uint8 tempMagnitude)\
 441          
 442          {
 443   1          cystatus status = CYRET_STARTED;
 444   1      
 445   1          /* Make sure the SPC is ready to accept command */
 446   1          if(CY_SPC_IDLE)
 447   1          {
 448   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 449   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_WR_ROW);
 450   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_WR_ROW;
 451   2      
 452   2              /* Make sure the command was accepted */
 453   2              if(CY_SPC_BUSY)
 454   2              {
 455   3                  CY_SPC_CPU_DATA_REG = array;
 456   3                  CY_SPC_CPU_DATA_REG = HI8(address);
 457   3                  CY_SPC_CPU_DATA_REG = LO8(address);
 458   3                  CY_SPC_CPU_DATA_REG = tempPolarity;
 459   3                  CY_SPC_CPU_DATA_REG = tempMagnitude;
 460   3              }
 461   2              else
 462   2              {
 463   3                  status = CYRET_CANCELED;
 464   3              }
 465   2          }
 466   1          else
 467   1          {
 468   2              status = CYRET_LOCKED;
 469   2          }
 470   1      
 471   1          return(status);
 472   1      }
 473          
 474          
 475          /*******************************************************************************
 476          * Function Name: CySpcEraseSector
 477          ****************************************************************************//**
 478          *  Erases all data in the addressed sector (block of 64 rows).
 479          *
 480          *  \param uint8 array:
 481          *   Id of the array.
 482          *
 483          *  \param uint8 sectorNumber:
 484          *   Zero based sector number within Flash/EEPROM array
 485          *
 486          * \return
 487          *  CYRET_STARTED
C51 COMPILER V9.51   CYSPC                                                                 03/16/2018 17:06:29 PAGE 9   

 488          *  CYRET_CANCELED
 489          *  CYRET_LOCKED
 490          *
 491          *******************************************************************************/
 492          cystatus CySpcEraseSector(uint8 array, uint8 sectorNumber)
 493          {
 494   1          cystatus status = CYRET_STARTED;
 495   1      
 496   1          /* Make sure the SPC is ready to accept command */
 497   1          if(CY_SPC_IDLE)
 498   1          {
 499   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 500   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_ER_SECTOR);
 501   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_ER_SECTOR;
 502   2      
 503   2              /* Make sure the command was accepted */
 504   2              if(CY_SPC_BUSY)
 505   2              {
 506   3                  CY_SPC_CPU_DATA_REG = array;
 507   3                  CY_SPC_CPU_DATA_REG = sectorNumber;
 508   3              }
 509   2              else
 510   2              {
 511   3                  status = CYRET_CANCELED;
 512   3              }
 513   2          }
 514   1          else
 515   1          {
 516   2              status = CYRET_LOCKED;
 517   2          }
 518   1      
 519   1          return(status);
 520   1      }
 521          
 522          
 523          /*******************************************************************************
 524          * Function Name: CySpcEraseRow
 525          ****************************************************************************//**
 526          *  Erases a row in Flash.
 527          *
 528          *  \param uint8 array:
 529          *   Id of the array.
 530          *
 531          *  \param uint16 address:
 532          *   Flash address
 533          *
 534          *  \param uint8 tempPolarity:
 535          *   temperature polarity.
 536          *   \param 1: the Temp Magnitude is interpreted as a positive value
 537          *   \param 0: the Temp Magnitude is interpreted as a negative value
 538          *
 539          *  \param uint8 tempMagnitude:
 540          *   temperature magnitude.
 541          *
 542          * \return
 543          *  CYRET_STARTED
 544          *  CYRET_CANCELED
 545          *  CYRET_LOCKED
 546          *
 547          *******************************************************************************/
 548          cystatus CySpcEraseRow(uint8 array, uint16 address, uint8 tempPolarity, uint8 tempMagnitude)\
 549          
C51 COMPILER V9.51   CYSPC                                                                 03/16/2018 17:06:29 PAGE 10  

 550          {
 551   1          cystatus status = CYRET_STARTED;
 552   1      
 553   1          /* Make sure the SPC is ready to accept command */
 554   1          if(CY_SPC_IDLE)
 555   1          {
 556   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 557   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_ER_ROW);
 558   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_ER_ROW;
 559   2      
 560   2              /* Make sure the command was accepted */
 561   2              if(CY_SPC_BUSY)
 562   2              {
 563   3                  CY_SPC_CPU_DATA_REG = array;
 564   3                  CY_SPC_CPU_DATA_REG = HI8(address);
 565   3                  CY_SPC_CPU_DATA_REG = LO8(address);
 566   3                  CY_SPC_CPU_DATA_REG = tempPolarity;
 567   3                  CY_SPC_CPU_DATA_REG = tempMagnitude;
 568   3              }
 569   2              else
 570   2              {
 571   3                  status = CYRET_CANCELED;
 572   3              }
 573   2          }
 574   1          else
 575   1          {
 576   2              status = CYRET_LOCKED;
 577   2          }
 578   1      
 579   1          return(status);
 580   1      }
 581          
 582          
 583          /*******************************************************************************
 584          * Function Name: CySpcGetTemp
 585          ****************************************************************************//**
 586          *  Returns the internal die temperature
 587          *
 588          *  \param uint8 numSamples:
 589          *   Number of samples. Valid values are 1-5, resulting in 2 - 32 samples
 590          *   respectively.
 591          *
 592          * \param uint16 timerPeriod:
 593          *   Number of ADC ACLK cycles. A valid 14 bit value is accepted, higher 2 bits
 594          *   of 16 bit values are ignored.
 595          *
 596          * \param uint8 clkDivSelect:
 597          *   ADC ACLK clock divide value. Valid values are 2 - 225.
 598          *
 599          * \return
 600          *  CYRET_STARTED
 601          *  CYRET_CANCELED
 602          *  CYRET_LOCKED
 603          *
 604          *******************************************************************************/
 605          cystatus CySpcGetTemp(uint8 numSamples)
 606          {
 607   1          cystatus status = CYRET_STARTED;
 608   1      
 609   1          /* Make sure the SPC is ready to accept command */
 610   1          if(CY_SPC_IDLE)
 611   1          {
C51 COMPILER V9.51   CYSPC                                                                 03/16/2018 17:06:29 PAGE 11  

 612   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 613   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_GET_TEMP);
 614   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_GET_TEMP;
 615   2      
 616   2              /* Make sure the command was accepted */
 617   2              if(CY_SPC_BUSY)
 618   2              {
 619   3                  CY_SPC_CPU_DATA_REG = numSamples;
 620   3              }
 621   2              else
 622   2              {
 623   3                  status = CYRET_CANCELED;
 624   3              }
 625   2          }
 626   1          else
 627   1          {
 628   2              status = CYRET_LOCKED;
 629   2          }
 630   1      
 631   1          return(status);
 632   1      }
 633          
 634          
 635          /*******************************************************************************
 636          * Function Name: CySpcLock
 637          ****************************************************************************//**
 638          *  Locks the SPC so it can not be used by someone else:
 639          *   - Saves wait-pipeline enable state and enable pipeline (PSoC5)
 640          *
 641          * \return
 642          *  CYRET_SUCCESS - if the resource was free.
 643          *  CYRET_LOCKED  - if the SPC is in use.
 644          *
 645          *******************************************************************************/
 646          cystatus CySpcLock(void)
 647          {
 648   1          cystatus status = CYRET_LOCKED;
 649   1          uint8 interruptState;
 650   1      
 651   1          /* Enter critical section */
 652   1          interruptState = CyEnterCriticalSection();
 653   1      
 654   1          if(CY_SPC_UNLOCKED == SpcLockState)
 655   1          {
 656   2              SpcLockState = CY_SPC_LOCKED;
 657   2              status = CYRET_SUCCESS;
 658   2      
 659   2              #if(CY_PSOC5)
              
                          if(0u != (CY_SPC_CPU_WAITPIPE_REG & CY_SPC_CPU_WAITPIPE_BYPASS))
                          {
                              /* Enable pipeline registers */
                              CY_SPC_CPU_WAITPIPE_REG &= ((uint32)(~CY_SPC_CPU_WAITPIPE_BYPASS));
              
                              /* At least 2 NOP instructions are recommended */
                              CY_NOP;
                              CY_NOP;
                              CY_NOP;
              
                              spcWaitPipeBypass = CY_SPC_CPU_WAITPIPE_BYPASS;
                          }
              
C51 COMPILER V9.51   CYSPC                                                                 03/16/2018 17:06:29 PAGE 12  

                      #endif  /* (CY_PSOC5) */
 675   2          }
 676   1      
 677   1          /* Exit critical section */
 678   1          CyExitCriticalSection(interruptState);
 679   1      
 680   1          return(status);
 681   1      }
 682          
 683          
 684          /*******************************************************************************
 685          * Function Name: CySpcUnlock
 686          ****************************************************************************//**
 687          *  Unlocks the SPC so it can be used by someone else:
 688          *   - Restores wait-pipeline enable state (PSoC5)
 689          *
 690          *******************************************************************************/
 691          void CySpcUnlock(void)
 692          {
 693   1          uint8 interruptState;
 694   1      
 695   1          /* Enter critical section */
 696   1          interruptState = CyEnterCriticalSection();
 697   1      
 698   1          /* Release the SPC object */
 699   1          SpcLockState = CY_SPC_UNLOCKED;
 700   1      
 701   1          #if(CY_PSOC5)
              
                      if(CY_SPC_CPU_WAITPIPE_BYPASS == spcWaitPipeBypass)
                      {
                          /* Force to bypass pipeline registers */
                          CY_SPC_CPU_WAITPIPE_REG |= CY_SPC_CPU_WAITPIPE_BYPASS;
              
                          /* At least 2 NOP instructions are recommended */
                          CY_NOP;
                          CY_NOP;
                          CY_NOP;
              
                          spcWaitPipeBypass = 0u;
                      }
              
                  #endif  /* (CY_PSOC5) */
 717   1      
 718   1          /* Exit critical section */
 719   1          CyExitCriticalSection(interruptState);
 720   1      }
 721          
 722          
 723          /*******************************************************************************
 724          * Function Name: CySpcGetAlgorithm
 725          ****************************************************************************//**
 726          *  Downloads SPC algorithm from SPC SROM into SRAM.
 727          *
 728          * \return
 729          *  CYRET_STARTED
 730          *  CYRET_LOCKED
 731          *
 732          *******************************************************************************/
 733          cystatus CySpcGetAlgorithm(void)
 734          {
 735   1          cystatus status = CYRET_STARTED;
C51 COMPILER V9.51   CYSPC                                                                 03/16/2018 17:06:29 PAGE 13  

 736   1      
 737   1          /* Make sure the SPC is ready to accept command */
 738   1          if(CY_SPC_IDLE)
 739   1          {
 740   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 741   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_DWNLD_ALGORITHM);
 742   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_DWNLD_ALGORITHM;
 743   2          }
 744   1          else
 745   1          {
 746   2              status = CYRET_LOCKED;
 747   2          }
 748   1      
 749   1          return(status);
 750   1      }
 751          
 752          /* [] END OF FILE */
 753          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1915    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     62    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
